//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Magazin.Models.EntytyLayer
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MagazinEntities : DbContext
    {
        public MagazinEntities()
            : base("name=MagazinEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BonProdu> BonProdus { get; set; }
        public virtual DbSet<Bonuri> Bonuris { get; set; }
        public virtual DbSet<Categorii> Categoriis { get; set; }
        public virtual DbSet<Producatori> Producatoris { get; set; }
        public virtual DbSet<Produse> Produses { get; set; }
        public virtual DbSet<Stocuri> Stocuris { get; set; }
        public virtual DbSet<Utilizatori> Utilizatoris { get; set; }
    
        public virtual int spAddCategorie(string cat)
        {
            var catParameter = cat != null ?
                new ObjectParameter("cat", cat) :
                new ObjectParameter("cat", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddCategorie", catParameter);
        }
    
        public virtual int spAddProducator(string nume, string tara)
        {
            var numeParameter = nume != null ?
                new ObjectParameter("nume", nume) :
                new ObjectParameter("nume", typeof(string));
    
            var taraParameter = tara != null ?
                new ObjectParameter("tara", tara) :
                new ObjectParameter("tara", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddProducator", numeParameter, taraParameter);
        }
    
        public virtual int spAddProdus(string nume, string bare, Nullable<int> prod, Nullable<int> cat)
        {
            var numeParameter = nume != null ?
                new ObjectParameter("nume", nume) :
                new ObjectParameter("nume", typeof(string));
    
            var bareParameter = bare != null ?
                new ObjectParameter("bare", bare) :
                new ObjectParameter("bare", typeof(string));
    
            var prodParameter = prod.HasValue ?
                new ObjectParameter("prod", prod) :
                new ObjectParameter("prod", typeof(int));
    
            var catParameter = cat.HasValue ?
                new ObjectParameter("cat", cat) :
                new ObjectParameter("cat", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddProdus", numeParameter, bareParameter, prodParameter, catParameter);
        }
    
        public virtual int spAddStoc(Nullable<int> produs, Nullable<int> cantitate, string um, Nullable<System.DateTime> aprovizionare, Nullable<System.DateTime> expirare, Nullable<decimal> pret_achizitie, Nullable<double> adaos)
        {
            var produsParameter = produs.HasValue ?
                new ObjectParameter("produs", produs) :
                new ObjectParameter("produs", typeof(int));
    
            var cantitateParameter = cantitate.HasValue ?
                new ObjectParameter("cantitate", cantitate) :
                new ObjectParameter("cantitate", typeof(int));
    
            var umParameter = um != null ?
                new ObjectParameter("um", um) :
                new ObjectParameter("um", typeof(string));
    
            var aprovizionareParameter = aprovizionare.HasValue ?
                new ObjectParameter("aprovizionare", aprovizionare) :
                new ObjectParameter("aprovizionare", typeof(System.DateTime));
    
            var expirareParameter = expirare.HasValue ?
                new ObjectParameter("expirare", expirare) :
                new ObjectParameter("expirare", typeof(System.DateTime));
    
            var pret_achizitieParameter = pret_achizitie.HasValue ?
                new ObjectParameter("pret_achizitie", pret_achizitie) :
                new ObjectParameter("pret_achizitie", typeof(decimal));
    
            var adaosParameter = adaos.HasValue ?
                new ObjectParameter("adaos", adaos) :
                new ObjectParameter("adaos", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddStoc", produsParameter, cantitateParameter, umParameter, aprovizionareParameter, expirareParameter, pret_achizitieParameter, adaosParameter);
        }
    
        public virtual int spAddUtilizator(string nume, string parola, Nullable<bool> tip)
        {
            var numeParameter = nume != null ?
                new ObjectParameter("nume", nume) :
                new ObjectParameter("nume", typeof(string));
    
            var parolaParameter = parola != null ?
                new ObjectParameter("parola", parola) :
                new ObjectParameter("parola", typeof(string));
    
            var tipParameter = tip.HasValue ?
                new ObjectParameter("tip", tip) :
                new ObjectParameter("tip", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddUtilizator", numeParameter, parolaParameter, tipParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spBonulZilei(Nullable<System.DateTime> data)
        {
            var dataParameter = data.HasValue ?
                new ObjectParameter("data", data) :
                new ObjectParameter("data", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spBonulZilei", dataParameter);
        }
    
        public virtual int spCreareBon(Nullable<System.DateTime> emitere, Nullable<int> @operator)
        {
            var emitereParameter = emitere.HasValue ?
                new ObjectParameter("emitere", emitere) :
                new ObjectParameter("emitere", typeof(System.DateTime));
    
            var operatorParameter = @operator.HasValue ?
                new ObjectParameter("operator", @operator) :
                new ObjectParameter("operator", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCreareBon", emitereParameter, operatorParameter);
        }
    
        public virtual int spCreareBonProdus(Nullable<int> bon, Nullable<int> produs, Nullable<int> cantitate, ObjectParameter subtotal)
        {
            var bonParameter = bon.HasValue ?
                new ObjectParameter("bon", bon) :
                new ObjectParameter("bon", typeof(int));
    
            var produsParameter = produs.HasValue ?
                new ObjectParameter("produs", produs) :
                new ObjectParameter("produs", typeof(int));
    
            var cantitateParameter = cantitate.HasValue ?
                new ObjectParameter("cantitate", cantitate) :
                new ObjectParameter("cantitate", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCreareBonProdus", bonParameter, produsParameter, cantitateParameter, subtotal);
        }
    
        public virtual int spCreareProdusSubtotal(Nullable<int> produs, Nullable<int> cantitate, ObjectParameter subtotal)
        {
            var produsParameter = produs.HasValue ?
                new ObjectParameter("produs", produs) :
                new ObjectParameter("produs", typeof(int));
    
            var cantitateParameter = cantitate.HasValue ?
                new ObjectParameter("cantitate", cantitate) :
                new ObjectParameter("cantitate", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCreareProdusSubtotal", produsParameter, cantitateParameter, subtotal);
        }
    
        public virtual int spGenerareTotalBon(Nullable<int> bon, ObjectParameter total)
        {
            var bonParameter = bon.HasValue ?
                new ObjectParameter("bon", bon) :
                new ObjectParameter("bon", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGenerareTotalBon", bonParameter, total);
        }
    
        public virtual ObjectResult<spGetCategorieById_Result> spGetCategorieById(Nullable<int> categorieId)
        {
            var categorieIdParameter = categorieId.HasValue ?
                new ObjectParameter("categorieId", categorieId) :
                new ObjectParameter("categorieId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCategorieById_Result>("spGetCategorieById", categorieIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spGetCategorieId(string cat)
        {
            var catParameter = cat != null ?
                new ObjectParameter("cat", cat) :
                new ObjectParameter("cat", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spGetCategorieId", catParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spGetProducatarId(string nume)
        {
            var numeParameter = nume != null ?
                new ObjectParameter("nume", nume) :
                new ObjectParameter("nume", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spGetProducatarId", numeParameter);
        }
    
        public virtual ObjectResult<spGetProducatoriById_Result> spGetProducatoriById(Nullable<int> producatoriId)
        {
            var producatoriIdParameter = producatoriId.HasValue ?
                new ObjectParameter("ProducatoriId", producatoriId) :
                new ObjectParameter("ProducatoriId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProducatoriById_Result>("spGetProducatoriById", producatoriIdParameter);
        }
    
        public virtual int spGetProductPrice(Nullable<int> produs, ObjectParameter pret)
        {
            var produsParameter = produs.HasValue ?
                new ObjectParameter("produs", produs) :
                new ObjectParameter("produs", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetProductPrice", produsParameter, pret);
        }
    
        public virtual ObjectResult<spGetProdusById_Result> spGetProdusById(Nullable<int> prod)
        {
            var prodParameter = prod.HasValue ?
                new ObjectParameter("prod", prod) :
                new ObjectParameter("prod", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProdusById_Result>("spGetProdusById", prodParameter);
        }
    
        public virtual int spLastBon(ObjectParameter bon)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spLastBon", bon);
        }
    
        public virtual int spOldestStoc(Nullable<int> produs, ObjectParameter iDstoc)
        {
            var produsParameter = produs.HasValue ?
                new ObjectParameter("produs", produs) :
                new ObjectParameter("produs", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spOldestStoc", produsParameter, iDstoc);
        }
    
        public virtual ObjectResult<spProducatorProdus_Result> spProducatorProdus(Nullable<int> prod)
        {
            var prodParameter = prod.HasValue ?
                new ObjectParameter("prod", prod) :
                new ObjectParameter("prod", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spProducatorProdus_Result>("spProducatorProdus", prodParameter);
        }
    
        public virtual int spSellProduct(ObjectParameter cantitate, Nullable<int> produs)
        {
            var produsParameter = produs.HasValue ?
                new ObjectParameter("produs", produs) :
                new ObjectParameter("produs", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSellProduct", cantitate, produsParameter);
        }
    
        public virtual int spStocExpirat()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spStocExpirat");
        }
    
        public virtual ObjectResult<spUtilizatorTotalZileLuna_Result> spUtilizatorTotalZileLuna(Nullable<int> utilizator, Nullable<System.DateTime> luna)
        {
            var utilizatorParameter = utilizator.HasValue ?
                new ObjectParameter("utilizator", utilizator) :
                new ObjectParameter("utilizator", typeof(int));
    
            var lunaParameter = luna.HasValue ?
                new ObjectParameter("luna", luna) :
                new ObjectParameter("luna", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUtilizatorTotalZileLuna_Result>("spUtilizatorTotalZileLuna", utilizatorParameter, lunaParameter);
        }
    
        public virtual ObjectResult<spValoarePerCategorie_Result> spValoarePerCategorie()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spValoarePerCategorie_Result>("spValoarePerCategorie");
        }
    }
}
